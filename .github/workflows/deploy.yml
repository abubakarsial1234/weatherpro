name: Deploy Weather App to AWS

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Apply
        run: |
          cd terraform
          terraform init
          terraform apply -auto-approve

      # --- FINAL FIX: Using a more robust method to set outputs ---
      - name: Set Terraform Outputs
        id: set_outputs # Is step ko ek ID de rahe hain
        run: |
          cd terraform
          echo "FRONTEND_IP=$(terraform output -raw frontend_instance_public_ip | head -n 1)" >> $GITHUB_OUTPUT
          echo "BACKEND_IP=$(terraform output -raw backend_instance_public_ip | head -n 1)" >> $GITHUB_OUTPUT
          echo "ALB_DNS=$(terraform output -raw alb_dns_name | head -n 1)" >> $GITHUB_OUTPUT

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push backend image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: weather-app-backend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          aws ecr describe-repositories --repository-names $ECR_REPOSITORY || aws ecr create-repository --repository-name $ECR_REPOSITORY
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./backend
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Build, tag, and push frontend image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: weather-app-frontend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          aws ecr describe-repositories --repository-names $ECR_REPOSITORY || aws ecr create-repository --repository-name $ECR_REPOSITORY
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./frontend
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # --- FINAL FIX: Reading outputs from the new method ---
      - name: Deploy Backend to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ steps.set_outputs.outputs.BACKEND_IP }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            sudo aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
            sudo docker stop backend-container || true
            sudo docker rm backend-container || true
            sudo docker pull ${{ steps.login-ecr.outputs.registry }}/weather-app-backend:${{ github.sha }}
            sudo docker run -d --name backend-container -p 5001:5001 ${{ steps.login-ecr.outputs.registry }}/weather-app-backend:${{ github.sha }}

      # --- FINAL FIX: Reading outputs from the new method ---
      - name: Deploy Frontend to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ steps.set_outputs.outputs.FRONTEND_IP }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            sudo aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
            sudo docker stop frontend-container || true
            sudo docker rm frontend-container || true
            sudo docker pull ${{ steps.login-ecr.outputs.registry }}/weather-app-frontend:${{ github.sha }}
            sudo docker run -d --name frontend-container -p 5000:5000 -e BACKEND_API_URL="http://${{ steps.set_outputs.outputs.ALB_DNS }}/api/weather" ${{ steps.login-ecr.outputs.registry }}/weather-app-frontend:${{ github.sha }}

